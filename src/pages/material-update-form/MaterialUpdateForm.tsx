import css from './MaterialUpdateForm.module.scss';
import { MaterialUpdateControl } from './material-update-control';
import { Label } from '../../widgets/input-label/label';
import { Input } from '../../widgets/input/input';
import { DropdownMenu } from '../../widgets/dropdown-menu/dropdown-menu';
import { TextArea } from '../../widgets/textarea/textarea';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import React, { useState, useEffect } from "react";
import { UpdateModal } from '../../widgets/update-modal/UpdateModal';

interface MaterialUpdateFormProps {
    title: string;
    description: string;
    content: string;
    materialType: string;
    competencies: string[]; // –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    handleCompetenciesSelect: (selectedCompetencies: string[]) => void; // –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    handleTitleChange: (value: string) => void;
    handleDescriptionChange: (value: string) => void;
    handleContentChange: (value: string) => void;
    handleMaterialTypeChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;
    onSave: () => void;
    isModalOpen: boolean; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
    toggleModal: () => void; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
}



export const MaterialUpdateForm = ({
                                       title,
                                       description,
                                       content,
                                       materialType,
                                       competencies,
                                       handleTitleChange,
                                       handleDescriptionChange,
                                       handleContentChange,
                                       handleMaterialTypeChange,
                                       handleCompetenciesSelect,
                                       onSave,

                                   }: MaterialUpdateFormProps) => {

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
    const [isModalOpen, setIsModalOpen] = useState(false);

    const toggleModalWindow = () => {
        setIsModalOpen(!isModalOpen);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    const handleRemoveCompetency = (index: number) => {
        const updatedCompetencies = competencies.filter((_, i) => i !== index);
        handleCompetenciesSelect(updatedCompetencies); // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
    };

    useEffect(() => {
        if (isModalOpen) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = 'auto';
        }

        return () => {
            document.body.style.overflow = 'auto';
        };
    }, [isModalOpen]);

    return (
        <div className={css.wrapper}>
            <MaterialUpdateControl onSave={onSave} />

            <div className={css.form}>
                <Label label="–ù–∞–∑–≤–∞–Ω–∏–µ">
                    <Input
                        value={title}
                        onChange={(e) => handleTitleChange(e.target.value)}
                    />
                </Label>
                <Label label="–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞">
                    <DropdownMenu
                        options={[
                            { value: '1', label: '–°—Ç–∞—Ç—å—è' },
                            { value: '2', label: '–ö–Ω–∏–≥–∞' },
                            { value: '3', label: '–í–∏–¥–µ–æ' },
                        ]}
                        value={materialType}
                        onChange={handleMaterialTypeChange}
                    />
                </Label>
                <Label label="–û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞">
                    <TextArea
                        value={description}
                        height={100}
                        onChange={(e) => handleDescriptionChange(e.target.value)}
                    />
                </Label>
                <Label label="–ö–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞">
                    <TextArea
                        value={content}
                        height={200}
                        onChange={(e) => handleContentChange(e.target.value)}
                    />
                </Label>

                <Label label="–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏">
                    <div className={css.competenciesList}>
                        {competencies.length > 0 ? (
                            competencies.map((competency, index) => (
                                <div key={index} className={css.wrapperCompetency}>
                                    <div className={css.content}>
                                        <span className={css.competency}>{competency}</span>
                                        <button
                                            className={css.deleteButton}
                                            onClick={(e) => {
                                                e.stopPropagation(); // –ß—Ç–æ–±—ã –∫–ª–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                                                handleRemoveCompetency(index); // –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é
                                            }}
                                        >
                                            üóëÔ∏è
                                        </button>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <span>–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π</span>
                        )}
                    </div>
                    <button
                        onClick={toggleModalWindow}
                        className={css.addCompetencyButton}
                    >
                        –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
                    </button>
                </Label>
            </div>

            <UpdateModal
                isOpen={isModalOpen}
                onClose={toggleModalWindow}
                selectedCompetencies={competencies} // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                onSave={(updatedCompetencies) => handleCompetenciesSelect(updatedCompetencies)}
            />
            <ToastContainer/>
        </div>
    );
};