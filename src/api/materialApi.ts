
import {createApi} from '@reduxjs/toolkit/query/react';
import {baseQueryWithReauth} from "./authBaseQuery.ts";


export interface ISignUpRequest {
    email: string;
    password: string;
    name?: string | null;
    organization_id: number;
}

interface UserResponse {
    email: string;
    name: string | null;
    department_id: number | null;
    role: number;
}

interface OrganizationUsersResponse {
    data: UserResponse[];
}

interface DeleteUserResponse {
    message: string;
}

interface CreateOrganizationRequest {
    name: string;
    prefix: string;
}
interface UserCourseProgress {
    user_email: string;
    user_name: string;
    course_id: number;
    course_title: string;
    is_completed: boolean | null;
    completed_at: string | null;
    total_materials: number;
    viewed_materials: number;
    last_viewed_at: string | null;
}


interface OrganizationCourseProgressResponse {
    data: UserCourseProgress[];
}

interface Department {
    department_id: number;
    name: string;
}

interface DepartmentsApiResponse {
    data: Department[];
}

interface CreateOrganizationResponse {
    message: string;
    organization_id: number;
}

export interface IAccountResponse {
    email: string;
    name: string | null;
    organization_id: number;
    message: string;
}

interface Organization {
    organization_id: number;
    name: string;
}

interface RegistrationCodeResponse {
    code: string;
    message: string;
}

interface DeleteCodeResponse {
    message: string;
}

// –¢–∏–ø—ã –¥–ª—è –∫—É—Ä—Å–æ–≤
interface Course {
    course_id: number;
    title: string;
    description: string;
    materials: string[];
    competencies: string[];
    create_date: string;
    material_ids: number[];
    department_id: number;
}

interface CreateCourseRequest {
    title: string;
    description: string;
    created_by: string;
    materials: number[];
    competencies: number[];
    department_id: number;
    organization_id: number; // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    material_ids?: number[];
}

interface UpdateCourseRequest {
    title: string;
    description: string;
    created_by: string;
    materials: number[];
    competencies: number[];
    department_id: number;
    organization_id?: number;
    material_ids?: number[];
}

interface CourseApiResponse {
    data: Course[];
}

interface CreateCourseResponse {
    course: Course;
    message: string;
}

interface UpdateCourseResponse {
    course: Course;
    message: string;
}

interface DeleteCourseResponse {
    message: string;
}

// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
interface Competency {
    competency_id: number;
    name: string;
    description: string;
    parent_id?: number;
    create_date: string;
}

interface Material {
    material_id: number;
    title: string;
    description: string;
    type_name: string;
    content: string;
    competencies: string[];
    type_id: number;
    create_date: string;
}

interface MaterialType {
    type_id: number;
    type: string;
}

interface CreateMaterialRequest {
    title: string;
    description: string;
    type_id: number;
    content: string;
    competencies: number[];
}

interface CreateMaterialTypeRequest {
    type: string;
}

interface UpdateMaterialRequest {
    title: string;
    description: string;
    type_id: number; // ID —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    content: string;
    competencies: number[]; // –ú–∞—Å—Å–∏–≤ ID –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
}
interface UpdateCompetencyRequest {
    name: string;
    description: string;
}

// –¢–∏–ø—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
interface MaterialsApiResponse {
    data: Material[];
}

interface UpdateCompetencyResponse {
    competency: Competency;
    message: string;
}

interface MaterialTypeApiResponse {
    data: MaterialType[];
}

interface CompetenciesApiResponse {
    data: Competency[];
}

interface CreateMaterialResponse {
    material: Material;
    message: string;
}

interface CreateMaterialTypeResponse {
    materialType: MaterialType
    message: string;
}

interface UpdateMaterialResponse {
    material: Material;
    message: string;
}

interface DeleteMaterialResponse {
    message: string; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
}

interface DeleteMaterialTypeResponse {
    message: string;
}

interface DeleteCompetencyResponse {
    message: string; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
}

interface CreateCompetencyRequest {
    name: string;
    description: string;
    parent_id?: number;
}

interface CreateCompetencyResponse {
    competency: Competency;
    message: string;
}

export interface CreateRegistrationCodePayload {
    organization_id: number;
    is_admin: boolean;
    department_id?: number;
}

export const materialsApi = createApi({
    reducerPath: 'materialsApi',
    baseQuery: baseQueryWithReauth,
    endpoints: (builder) => ({
        signUp: builder.mutation<{ message: string }, ISignUpRequest>({
            query: (newAccount) => ({
                url: '/auth/sign-up',
                method: 'POST',
                body: newAccount,
            }),
            transformResponse: (response: { message: string }) => response,
        }),
        // Endpoint –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç access_token –∏ refresh_token
        signIn: builder.mutation<{ access_token: string; refresh_token: string  }, { email: string; password: string }>({
            query: (credentials) => ({
                url: '/auth/sign-in',
                method: 'POST',
                body: credentials,
            }),
        }),
        // Endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_token –ø–æ refresh_token. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ access_token.
            refreshToken: builder.mutation<{ access_token: string }, void>({
            query: () => ({
                url: '/auth/refresh',
                method: 'POST',
                body: { refresh_token: localStorage.getItem('refresh_token') },
            }),
        }),

        fetchMaterials: builder.query<MaterialsApiResponse, void>({
            query: () => '/materials',
            transformResponse: (response: Material[]): MaterialsApiResponse => {
                return { data: response };
            },
        }),
        fetchOrganizationUsers: builder.query<OrganizationUsersResponse, { organization_id?: number }>({
            query: (params) => {
                const queryString = params.organization_id ? `?organization_id=${params.organization_id}` : '';
                return `/users/organization${queryString}`;
            },
            transformResponse: (response: UserResponse[]): OrganizationUsersResponse => ({ data: response }),
        }),


        deleteUser: builder.mutation<DeleteUserResponse, string>({
            query: (email) => ({
                url: `/users/${email}`,
                method: 'DELETE',
            }),
            transformResponse: (response: { message: string }): DeleteUserResponse => response,
        }),
        fetchCompetencies: builder.query<CompetenciesApiResponse, void>({
            query: () => '/competencies',
            transformResponse: (response: Competency[]): CompetenciesApiResponse => {
                return { data: response };
            },
        }),
        fetchMaterialTypeById: builder.query<MaterialType, number>({
            query: (typeId) => `/materialsType/${typeId}`, // –ó–∞–ø—Ä–æ—Å –ø–æ ID —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        }),
        FetchMaterialType: builder.query<MaterialTypeApiResponse, void>({
            query: () => '/materialsType',
            transformResponse: (response: MaterialType[]): MaterialTypeApiResponse => {
                return { data: response };
            },
        }),
        createMaterial: builder.mutation<CreateMaterialResponse, CreateMaterialRequest>({
            query: (newMaterial) => ({
                url: '/materials',
                method: 'POST',
                body: newMaterial,
            }),
            transformResponse: (response: { material: Material, message: string }): CreateMaterialResponse => {
                return response;
            },
        }),
        createCompetency: builder.mutation<CreateCompetencyResponse, CreateCompetencyRequest>({
            query: (newCompetency) => ({
                url: '/competencies',
                method: 'POST',
                body: newCompetency,
            }),
            transformResponse: (response: { competency: Competency; message: string }): CreateCompetencyResponse => {
                return response;
            },
        }),
        createMaterialType: builder.mutation<CreateMaterialTypeResponse, CreateMaterialTypeRequest>({
            query: (newMaterialType) => ({
                url: '/materialsType',
                method: 'POST',
                body: newMaterialType,
            }),
            transformResponse: (response: {materialType: MaterialType, message: string}) : CreateMaterialTypeResponse => {
                return response;
            },
        }),
        deleteMaterial: builder.mutation<DeleteMaterialResponse, number>({
            query: (materialId) => ({
                url: `/materials/${materialId}`,
                method: 'DELETE',
            }),
            transformResponse: (response: { message: string }): DeleteMaterialResponse => {
                return response;
            },
        }),
        deleteCompetency: builder.mutation<DeleteCompetencyResponse, number>({
            query: (competencyId) => ({
                url: `/competencies/${competencyId}`,
                method: 'DELETE',
            }),
            transformResponse: (response: { message: string }): DeleteCompetencyResponse => {
                return response;
            },
        }),
        deleteMaterialType: builder.mutation<DeleteMaterialTypeResponse, number>({
            query: (materialTypeId) => ({
                url: `/materialsType/${materialTypeId}`,
                method: 'DELETE',
            }),
            transformResponse: (response: {message: string}): DeleteMaterialTypeResponse => {
                return response;
            },
        }),
        // –ù–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ ID
        fetchMaterialById: builder.query<Material, number>({
            query: (materialId) => `/materials/${materialId}`, // –ó–∞–ø—Ä–æ—Å –ø–æ id
        }),
        // –ù–æ–≤—ã–π endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        updateMaterial: builder.mutation<UpdateMaterialResponse, { materialId: number, data: UpdateMaterialRequest }>({
            query: ({ materialId, data }) => ({
                url: `/materials/${materialId}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º materialId –¥–ª—è –ø—É—Ç–∏
                method: 'PUT',
                body: data,
            }),
            transformResponse: (response: { material: Material, message: string }): UpdateMaterialResponse => {
                return response;
            },
        }),

        fetchDepartments: builder.query<DepartmentsApiResponse, void>({
            query: () => '/registration/departments',
            transformResponse: (response: Department[]): DepartmentsApiResponse => ({ data: response }),
        }),

        fetchOrganizationCourseProgress: builder.query<OrganizationCourseProgressResponse, void>({
            query: () => '/courses/progress/organization',
            transformResponse: (response: UserCourseProgress[]): OrganizationCourseProgressResponse => ({ data: response }),
        }),

        updateCompetency: builder.mutation<UpdateCompetencyResponse, {competencyId: number, data: UpdateCompetencyRequest}>({
            query: ({competencyId, data}) => ({
                url: `/competencies/${competencyId}`,
                method: 'PUT',
                body: data,
            }),
            transformResponse: (response: {competency: Competency, message: string }): UpdateCompetencyResponse => {
                return response;
            },

        }),
        fetchCourses: builder.query<CourseApiResponse, void>({
            query: () => '/courses',
            transformResponse: (response: Course[]): CourseApiResponse => {
                return { data: response };
            },
        }),
        fetchCourseById: builder.query<Course, number>({
            query: (courseId) => `/courses/${courseId}`,
        }),
        createCourse: builder.mutation<CreateCourseResponse, CreateCourseRequest>({
            query: (newCourse) => ({
                url: '/courses',
                method: 'POST',
                body: newCourse,
            }),
            transformResponse: (response: { course: Course; message: string }): CreateCourseResponse => response,
        }),
        updateCourse: builder.mutation<UpdateCourseResponse, { courseId: number; data: UpdateCourseRequest }>({
            query: ({ courseId, data }) => ({
                url: `/courses/${courseId}`,
                method: 'PUT',
                body: data,
            }),
            transformResponse: (response: { course: Course; message: string }): UpdateCourseResponse => response,
        }),
        deleteCourse: builder.mutation<DeleteCourseResponse, number>({
            query: (courseId) => ({
                url: `/courses/${courseId}`,
                method: 'DELETE',
            }),
            transformResponse: (response: { message: string }): DeleteCourseResponse => response,
        }),
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞
        completeCourse: builder.mutation<{ message: string }, number>({
            query: (courseId) => ({
                url: `/courses/${courseId}/complete`,
                method: 'POST',
            }),
            transformResponse: (response: { message: string }) => response,
        }),
        // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
        fetchCompletedCourses: builder.query<CourseApiResponse, void>({
            query: () => `/courses/completed`,
            transformResponse: (response: Course[]): CourseApiResponse => {
                return { data: response };
            },
        }),
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫—É—Ä—Å—É
        fetchCourseProgress: builder.query<{ completed_materials: number[] }, number>({
            query: (courseId) => `/courses/${courseId}/progress`,
        }),
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞
        isCourseCompleted: builder.query<{ completed: boolean }, number>({
            query: (courseId) => `/courses/${courseId}/completed`,
        }),
        fetchOrganizations: builder.query<{ data: Organization[] }, void>({
            query: () => '/registration/organizations',
            transformResponse: (response: Organization[]) => ({ data: response }),
        }),

        createRegistrationCode: builder.mutation<RegistrationCodeResponse, CreateRegistrationCodePayload>({
            query: (data) => ({
                url: '/registration/code',
                method: 'POST',
                body: data,
            }),
            transformResponse: (response: { code: string }) => ({ code: response.code, message: '–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω' }),
        }),

        deleteRegistrationCode: builder.mutation<DeleteCodeResponse, string>({
            query: (code) => ({
                url: `/registration/code/${code}`,
                method: 'DELETE',
            }),
            transformResponse: (response: { message: string }): DeleteCodeResponse => response,
        }),
        // –û—Ç–º–µ—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
        markMaterialAsCompleted: builder.mutation<{ message: string }, { courseId: number, materialId: number }>({
            query: ({ courseId, materialId }) => ({
                url: `/courses/${courseId}/materials/${materialId}/complete`,
                method: 'POST',
            }),
            transformResponse: (response: { message: string }) => response,
        }),
        createOrganization: builder.mutation<CreateOrganizationResponse, CreateOrganizationRequest>({
            query: (data) => ({
                url: '/registration/organization',
                method: 'POST',
                body: data,
            }),
            transformResponse: (response: { message: string; organization_id: number }): CreateOrganizationResponse => response,
        }),
        deleteOrganization: builder.mutation<{ message: string }, number>({
            query: (organizationId) => ({
                url: `/registration/organization/${organizationId}`,
                method: 'DELETE',
            }),
            transformResponse: (response: { message: string }): { message: string } => response,
        }),
    }),
});

export const {
    useSignInMutation,
    useRefreshTokenMutation,
    useFetchMaterialsQuery,
    useFetchCompetenciesQuery,
    useCreateMaterialMutation,
    useDeleteMaterialMutation,
    useFetchMaterialByIdQuery, // –ù–æ–≤—ã–π —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ ID
    useUpdateMaterialMutation, // –•—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    useFetchMaterialTypeByIdQuery,
    useFetchMaterialTypeQuery,
    useCreateMaterialTypeMutation,
    useDeleteMaterialTypeMutation,
    useDeleteCompetencyMutation,
    useCreateCompetencyMutation,
    useUpdateCompetencyMutation,
    useFetchCoursesQuery,
    useFetchCourseByIdQuery,
    useCreateCourseMutation,
    useUpdateCourseMutation,
    useDeleteCourseMutation,
    useSignUpMutation,
    useCompleteCourseMutation,
    useFetchCourseProgressQuery,
    useIsCourseCompletedQuery,
    useMarkMaterialAsCompletedMutation,
    useFetchCompletedCoursesQuery,
    useFetchOrganizationsQuery,
    useCreateRegistrationCodeMutation,
    useDeleteRegistrationCodeMutation,
    useCreateOrganizationMutation,
    useDeleteOrganizationMutation,
    useFetchDepartmentsQuery,
    useFetchOrganizationCourseProgressQuery,
    useFetchOrganizationUsersQuery,
    useDeleteUserMutation,
} = materialsApi;