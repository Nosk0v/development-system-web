// MaterialTypesModal.tsx
import { useEffect, useState } from 'react';
import { useFetchMaterialTypeQuery, useDeleteMaterialTypeMutation, useFetchMaterialsQuery } from '../../api/materialApi.ts';
import { toast } from 'react-toastify';
import styles from './MaterialTypesModal.module.scss';
import { CreateMaterialTypeModal } from '../create-material-type/CreateMaterialTypeModal';  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

interface MaterialTypesModalProps {
    isOpen: boolean;
    onClose: () => void;
}

export const MaterialTypesModal = ({ isOpen, onClose }: MaterialTypesModalProps) => {
    const { data: materialTypesData, isLoading: isMaterialTypesLoading, isError: isMaterialTypesError, refetch } = useFetchMaterialTypeQuery();
    const { data: materialsData, isLoading: isMaterialsLoading, isError: isMaterialsError } = useFetchMaterialsQuery();  // Fetch all materials
    const [materialTypes, setMaterialTypes] = useState<{ type_id: number; type: string }[]>([]);
    const [deleteMaterialType] = useDeleteMaterialTypeMutation();
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);

    useEffect(() => {
        if (materialTypesData && materialTypesData.data) {
            setMaterialTypes(materialTypesData.data);
        }
    }, [materialTypesData]);

    const handleDelete = (typeId: number, typeName: string) => {
        if (materialsData && materialsData.data.some((material) => material.type_name === typeName)) {
            toast.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö.");
            return;
        }

        deleteMaterialType(typeId)
            .unwrap()
            .then(() => {
                setMaterialTypes((prevTypes) => prevTypes.filter((type) => type.type_id !== typeId));
                toast.success("–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.");
            })
            .catch((error) => {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
                toast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.");
            });
    };

    useEffect(() => {
        if (isOpen) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = '';
        }

        return () => {
            document.body.style.overflow = '';
        };
    }, [isOpen]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const handleTypeCreated = () => {
        refetch();  // –í—ã–∑—ã–≤–∞–µ–º refetch –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    };

    return (
        <div className={styles.modal}>
            <div className={styles.overlay} onClick={onClose}></div>
            <div className={styles.content}>
                <h2>–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</h2>

                {isMaterialTypesLoading && <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...</p>}
                {isMaterialTypesError && <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</p>}
                {isMaterialsLoading && <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...</p>}
                {isMaterialsError && <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</p>}

                <ul className={styles.list}>
                    {materialTypes.map((type) => (
                        <li key={type.type_id} className={styles.wrapper}>
                            <span className={styles.competency}>{type.type}</span>
                            <button
                                className={styles.deleteButton}
                                onClick={(e) => {
                                    e.stopPropagation();
                                    handleDelete(type.type_id, type.type);
                                }}
                            >
                                üóëÔ∏è
                            </button>
                        </li>
                    ))}
                </ul>

                <div className={styles.actions}>
                    <button onClick={onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
                    <button onClick={() => setCreateModalOpen(true)}>–°–æ–∑–¥–∞—Ç—å</button>
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ */}
            <CreateMaterialTypeModal
                isOpen={isCreateModalOpen}
                onClose={() => setCreateModalOpen(false)}
                onTypeCreated={handleTypeCreated} />
        </div>
    );
};